import React, { Component } from 'react';
import Chess from 'chess.js';
import PropTypes from 'prop-types';
import { Chessground } from 'chessground';
import 'normalize.css/normalize.css';
import '@blueprintjs/icons/lib/css/blueprint-icons.css';
import '@blueprintjs/core/lib/css/blueprint.css';
import { ContextMenu, Menu, MenuItem } from '@blueprintjs/core';
import { withSize } from 'react-sizeme';

const propTypes = {
    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    fen: PropTypes.string,
    orientation: PropTypes.string,
    turnColor: PropTypes.string,
    check: PropTypes.string,
    lastMove: PropTypes.array,
    selected: PropTypes.string,
    coordinates: PropTypes.bool,
    autoCastle: PropTypes.bool,
    viewOnly: PropTypes.bool,
    disableContextMenu: PropTypes.bool,
    resizable: PropTypes.bool,
    addPieceZIndex: PropTypes.bool,
    hightlight: PropTypes.object,
    animation: PropTypes.object,
    movable: PropTypes.object,
    premovable: PropTypes.object,
    predroppable: PropTypes.object,
    draggable: PropTypes.object,
    selectable: PropTypes.object,
    onChange: PropTypes.func,
    onMove: PropTypes.func,
    onDropNewPiece: PropTypes.func,
    onSelect: PropTypes.func,
    items: PropTypes.object,
    drawable: PropTypes.object,
    style: PropTypes.object
};
class ChessgroundWrapper extends React.Component {
    buildConfigFromProps(props) {
        const config = { events: {} };
        Object.keys(propTypes).forEach(k => {
            const v = props[k];
            if (v) {
                const match = k.match(/^on([A-Z]\S*)/);
                if (match) {
                    config.events[match[1].toLowerCase()] = v;
                }
                else {
                    config[k] = v;
                }
            }
        });
        return config;
    }
    handleStateChanged(s) {
    }
    componentDidMount() {
        this.cg = Chessground(this.el, this.buildConfigFromProps(this.props));
    }
    componentWillReceiveProps(nextProps) {
        if (this.cg !== undefined && this.cg !== null) {
            this.cg.set(this.buildConfigFromProps(nextProps));
        }
    }
    componentWillUnmount() {
        if (this.cg !== undefined && this.cg !== null) {
            this.cg.destroy();
        }
    }
    render() {
        const props = { style: Object.assign({}, this.props.style) };
        if (this.props.width) {
            props.style.width = this.props.width;
        }
        if (this.props.height) {
            props.style.height = this.props.height;
        }
        return React.createElement("div", Object.assign({ ref: el => this.el = el }, props));
    }
}
ChessgroundWrapper.defaultProps = {
    coordinates: true,
    resizable: true,
    hightlight: {
        lastMove: true,
        check: true
    }
};

const uciMoveToSanMove = (uci, board) => {
    const moves = board.moves();
    var fromSquare = uci.substring(0, 2);
    var toSquare = uci.substring(2, 4);
    var promotingPiece = '';
    if (uci.length == 5) {
        promotingPiece = uci[4].toString();
    }
    const fromPiece = board.get(fromSquare);
    if (fromPiece == null) {
        throw new Error(`No piece found at ${fromSquare} while parsing move ${uci} in position ${board.fen()}.`);
    }
    if (fromPiece.type == 'k') {
        if ((fromSquare == 'e1' && toSquare == 'g1') || (fromSquare == 'e8' && toSquare == 'g8')) {
            return 'O-O';
        }
        else if ((fromSquare == 'e1' && toSquare == 'c1') || (fromSquare == 'e8' && toSquare == 'c8')) {
            return 'O-O-O';
        }
    }
    var pieceFilter = fromPiece.type !== 'p' ? fromPiece.type.toUpperCase() : '';
    var areWeAPawnMove = pieceFilter === '';
    var possibleMoves = [];
    for (let m of moves) {
        if ((areWeAPawnMove || m.startsWith(pieceFilter)) && m.indexOf(toSquare) !== -1) {
            if (promotingPiece != '') {
                var promotionPortion = '=' + promotingPiece.toUpperCase();
                if (m.indexOf(promotionPortion) !== -1) {
                    possibleMoves.push(m);
                }
            }
            else {
                var isThisAPawnMove = m[0] === m[0].toLowerCase();
                if (areWeAPawnMove == isThisAPawnMove) {
                    possibleMoves.push(m);
                }
            }
        }
    }
    if (possibleMoves.length == 1) {
        return possibleMoves[0];
    }
    const fromRank = fromSquare[1];
    const fromFile = fromSquare[0];
    var finalMove = null;
    var finalMoveScore = -1;
    for (let m of possibleMoves) {
        var deAmbiguiousPart = m;
        deAmbiguiousPart.replace('x', '');
        deAmbiguiousPart.replace('+', '');
        deAmbiguiousPart.replace('#', '');
        deAmbiguiousPart = deAmbiguiousPart.split('=')[0];
        if (pieceFilter !== '') {
            deAmbiguiousPart = deAmbiguiousPart.replace(pieceFilter, '');
        }
        deAmbiguiousPart = deAmbiguiousPart.replace(toSquare, '');
        var moveRelevantScore = 0;
        if (deAmbiguiousPart.startsWith(fromFile))
            moveRelevantScore++;
        if (deAmbiguiousPart.endsWith(fromRank))
            moveRelevantScore++;
        if (moveRelevantScore > finalMoveScore) {
            finalMove = m;
            finalMoveScore = moveRelevantScore;
        }
    }
    if (finalMove === null) {
        throw new Error('No move found for uci ' + uci + '. Move was ambiguous down to ' + possibleMoves.join(',') + ' and then all moves eliminated.');
    }
    return finalMove;
};

var bP = '<svg xmlns="http://www.w3.org/2000/svg" shape-rendering="geometricPrecision" image-rendering="optimizeQuality" fill-rule="evenodd" clip-rule="evenodd" viewBox="0 0 50 50"><path d="m25 46.45h-13.394c-.66-1.651-.991-3.378-.991-5.182 0-3.056.864-5.8 2.599-8.238 1.736-2.43 3.971-4.166 6.697-5.207-1.168-.542-2.125-1.363-2.862-2.464-.737-1.101-1.101-2.345-1.101-3.734 0-1.736.576-3.243 1.736-4.513 1.152-1.278 2.574-2.02 4.267-2.21-1.346-1.01-2.02-2.345-2.02-3.996 0-1.389.491-2.582 1.482-3.573.982-.991 2.176-1.482 3.581-1.482 1.389 0 2.582.491 3.573 1.482.991.991 1.49 2.184 1.49 3.573 0 1.651-.669 2.989-2.02 3.996 1.693.195 3.116.931 4.267 2.21 1.16 1.27 1.736 2.777 1.736 4.513 0 1.389-.373 2.633-1.126 3.734-.753 1.101-1.71 1.922-2.862 2.464 2.726 1.041 4.961 2.777 6.697 5.207 1.736 2.438 2.599 5.182 2.599 8.238 0 1.786-.322 3.514-.965 5.182h-13.394" fill="#1f1a17" transform="matrix(1 0 0 .97324 0 1.243)"/></svg>';

var bP$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': bP
});

var bR = '<svg xmlns="http://www.w3.org/2000/svg" shape-rendering="geometricPrecision" image-rendering="optimizeQuality" fill-rule="evenodd" clip-rule="evenodd" viewBox="0 0 50 50"><defs><linearGradient id="0" x1="21.19" y1="37.552" x2="77.74" y2="37.429" gradientUnits="userSpaceOnUse"><stop stop-color="#fff"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient></defs><path fill="#1f1a17" d="m28.408 9.22h4.216v-3.395h6.796v9.295l-5.5 4.243v11.857l4.22 4.221v5.08h3.789v5.929h-33.859v-5.929h3.794v-5.08l4.246-4.221v-11.857l-5.508-4.243v-9.295h6.774v3.395h4.242v-3.395h6.79z"/><path fill="url(#0)" d="m25.01 35.04h-10.27l-1.143 1.067v1.439h22.826v-1.439l-1.143-1.067h-10.27m-11.413 5.08v2.532h22.826v-2.532h-22.826m11.413-27.08h-12.7v1.143l1.812 1.363h21.802l1.761-1.363v-1.143h-12.675m0 4.191h-8.678l1.482 1.168v1.414h14.393v-1.414l1.482-1.168h-8.678m0 13.547h-7.197v1.143l-1.482 1.439h17.357l-1.482-1.439v-1.143h-7.197"/></svg>';

var bR$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': bR
});

var bN = '<svg xmlns="http://www.w3.org/2000/svg" shape-rendering="geometricPrecision" image-rendering="optimizeQuality" fill-rule="evenodd" clip-rule="evenodd" viewBox="0 0 50 50"><defs><linearGradient id="0" x1="21.253" y1="37.592" x2="77.64" y2="37.469" gradientUnits="userSpaceOnUse"><stop stop-color="#fff"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient></defs><path fill="#1f1a17" d="m26.18 9.395c2.599.169 5 .838 7.222 2.02 2.21 1.168 4.098 2.675 5.656 4.513 1.092 1.287 2.117 2.845 3.082 4.665.974 1.812 1.744 3.742 2.32 5.774.66 2.371 1.084 4.851 1.253 7.459.178 2.599.263 5.01.263 7.23v5.402c0 0-1.287 0-3.861 0-2.565 0-5.901 0-10.01 0h-16.637c-.152 0-.22-.406-.212-1.211.008-.813.059-1.465.161-1.964.059-.398.22-.957.466-1.685.254-.728.66-1.609 1.245-2.65.262-.533.889-1.304 1.88-2.32.999-1.016 2.134-2.201 3.429-3.539.745-.762 1.321-1.719 1.744-2.879.423-1.151.601-2.201.533-3.15-.61.5-1.279.906-2.01 1.219-3.505 1.253-6.05 3.073-7.611 5.452-.119.152-.491.821-1.118 2.02-.33.627-.618 1.058-.847 1.287-.313.313-.771.491-1.363.525-.923.042-1.643-.398-2.159-1.346-.694.203-1.312.288-1.863.254-.923-.347-1.592-.72-2.01-1.118-.847-.847-1.389-1.685-1.651-2.532-.254-.847-.381-1.753-.381-2.726 0-1.389.855-3.226 2.582-5.512 2.02-2.625 3.09-4.631 3.217-6 0-.593.059-1.262.178-2.01.102-.517.305-1.01.618-1.49.22-.33.364-.559.432-.677.076-.127.212-.313.415-.559.144-.203.271-.356.373-.457.093-.11.22-.254.373-.44.178-.212.406-.457.694-.745-.88-2.413-1.236-4.902-1.067-7.459 3.285 1.168 6.05 3.01 8.28 5.529.55-1.871 1.626-3.387 3.226-4.538 1.321.923 2.371 2.151 3.15 3.666"/><path fill="url(#0)" d="m15.688 17.786c.364-.186.542-.279.542-.279.499-.195.652-.559.474-1.092-.195-.491-.576-.66-1.143-.491-1.947.711-3.294 2.02-4.04 3.92-.118.542.076.914.593 1.118.516.161.864-.017 1.041-.55.136-.279.229-.466.296-.542.186.144.423.245.72.296 1.01.161 1.6-.279 1.761-1.338.051-.364-.034-.711-.246-1.041m-4.115 16.764c.059-.152.169-.373.322-.669.279-.694.415-1.109.415-1.245-.025-.457-.271-.694-.72-.694-.33 0-.711.474-1.16 1.414-.068.136-.169.254-.296.347-.449.466-.381.855.195 1.168.533.313.94.212 1.245-.322m14.63-9.203c1.16-1.524 1.727-3.217 1.71-5.08-.068-.55-.381-.821-.94-.821-.762 0-1.058.279-.898.838.051.914-.034 1.668-.271 2.261-.381.94-.804 1.642-1.261 2.108-.254.5-.102.864.449 1.092.525.245.931.119 1.211-.398m-6.477-12.11c-.076-.593-.059-1.236.051-1.93-.991.195-1.922.66-2.802 1.389-.525.279-.652.669-.373 1.168.279.508.669.593 1.168.246.347-.186.669-.356.957-.508.288-.161.618-.279.999-.364m23.25 31.454c-.017 0 0-.449.042-1.346.131-3.107.095-6.221.076-9.33-.017-2.21-.313-4.411-.889-6.613-.84-3.31-2.124-6.485-4.072-9.296-2.634-3.845-6.814-6.03-11.286-6.976.126.766.033 1.54.076 2.311 1.6.542 3.116 1.219 4.538 2.032 4.241 2.554 6.414 7.275 7.197 11.93 1.272 6.154.453 11.557.813 17.289h3.505m-33.537-14.554c.474-.339.525-.728.144-1.194-.398-.381-.83-.415-1.312-.102-1.01.66-1.549 1.532-1.617 2.608.017.542.347.804.974.771.593-.051.881-.356.864-.923.135-.525.449-.914.948-1.16"/></svg>';

var bN$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': bN
});

var bK = '<svg xmlns="http://www.w3.org/2000/svg" shape-rendering="geometricPrecision" image-rendering="optimizeQuality" fill-rule="evenodd" clip-rule="evenodd" viewBox="0 0 50 50"><defs><linearGradient id="0" x1="21.13" y1="37.22" x2="77.76" y2="37.469" gradientUnits="userSpaceOnUse"><stop stop-color="#fff"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient></defs><g fill="#1f1a17"><path d="m25.821 12.02h-1.761v-3.251h-2.066c-.559 0-.838-.271-.838-.821v-.025c0-.542.279-.813.838-.813h2.066v-2.108c0-.584.296-.872.889-.872.576 0 .872.288.872.872v2.108h2.134c.542 0 .813.271.813.813v.025c0 .55-.271.821-.813.821l-2.117.025-.017 3.226"/><path d="m11.03 37.744l-.813-4.64c-.017 0-.042-.034-.076-.102-.085-.118-.322-.271-.711-.457-.381-.195-.838-.516-1.346-.982-.728-.61-1.295-1.109-1.702-1.49-.406-.373-.771-.787-1.101-1.236-1.01-1.389-1.575-3.065-1.685-5.04-.169-1.897.601-3.793 2.303-5.681 1.719-1.88 4.047-2.769 6.968-2.65 1.092.068 2.379.33 3.844.796.483.195.974.39 1.482.576.5.195.999.389 1.499.584.262.135.5.271.694.398-.085-.347-.127-.694-.127-1.041 0-1.287.457-2.388 1.38-3.302.914-.906 2.024-1.372 3.311-1.389 1.287 0 2.388.466 3.302 1.38.906.914 1.363 2.02 1.363 3.285 0 .262-.034.61-.102 1.041.229-.144.457-.271.669-.372.762-.33 1.761-.72 3.01-1.16 1.422-.483 2.701-.754 3.844-.821 2.921-.136 5.241.754 6.943 2.65 1.668 1.888 2.447 3.785 2.328 5.681-.127 1.973-.703 3.649-1.71 5.04-.33.449-.703.864-1.118 1.253-.406.39-.965.881-1.66 1.473-.542.466-1.01.796-1.389.982-.381.186-.601.347-.669.457-.017.034-.034.059-.051.076-.017.017-.025.034-.025.051l-.796 4.665 1.643 6.121c-.83.745-2.684 1.355-5.554 1.837-2.879.483-6.206.72-9.974.72-3.835 0-7.214-.254-10.118-.754-2.912-.508-4.741-1.143-5.486-1.897l1.634-6.05"/></g><path fill="url(#0)" d="m24.949 20.675c-.034-.161-.076-.305-.127-.423-.093-.33-.178-.567-.245-.72-.051-.11-.119-.254-.195-.432-.085-.169-.169-.356-.254-.559-.051-.119-.11-.271-.186-.457-.068-.195-.136-.373-.186-.533-.042-.152-.068-.305-.068-.474 0-.872.415-1.312 1.262-1.312.881 0 1.312.432 1.312 1.287 0 .22-.034.373-.093.474-.237.627-.356.965-.372 1.016-.254.5-.406.821-.474.965-.119.271-.195.508-.22.72-.051.102-.085.186-.102.262-.017.076-.034.136-.051.186m-2.777 8.56c-2.066.034-3.954.135-5.673.322-1.71.178-3.03.44-3.979.77-.491-.618-1.067-1.228-1.719-1.854-.66-.618-1.228-1.202-1.727-1.744-.83-.847-1.236-1.77-1.236-2.777 0-1.245.203-2.151.618-2.726.44-.669 1.135-1.16 2.057-1.482.923-.322 1.863-.483 2.803-.483 1.194 0 2.328.262 3.42.796 1.075.559 1.787 1.01 2.134 1.338 1.126 1.143 2.01 2.379 2.633 3.717.212.5.372 1.194.483 2.074.11.889.169 1.566.186 2.049m2.777-4.318c.119-.466.212-.787.296-.965.169-.643.356-1.194.576-1.643.093-.279.237-.601.432-.974.186-.373.389-.804.61-1.279.127-.279.271-.627.415-1.033.152-.406.305-.804.449-1.202.135-.33.203-.686.203-1.067 0-.813-.296-1.499-.872-2.066-.576-.576-1.279-.864-2.108-.864-1.964 0-2.955.991-2.955 2.955 0 .381.068.737.203 1.067.364 1.075.643 1.82.838 2.235.22.474.415.906.601 1.279.178.372.339.694.466.974.22.55.398 1.092.55 1.643.034.093.127.415.296.94m-.889 6.223c0-.66-.017-1.575-.051-2.735-.034-1.168-.161-2.142-.372-2.921-.677-2.21-1.702-3.996-3.082-5.351-.711-.694-1.795-1.346-3.268-1.939-1.685-.66-3.285-.991-4.792-.991-2.608 0-4.547.931-5.8 2.803-.711.991-1.067 2.235-1.067 3.717 0 1.626.398 2.955 1.185 3.996.415.593 1.211 1.329 2.388 2.21 1.168.872 2.168 1.685 2.972 2.43 1.439-.313 3.065-.584 4.877-.821 1.812-.229 4.149-.364 7.01-.398m13.784 11.735l-.737-2.929c-3.226-.737-7.281-1.109-12.158-1.109-4.826 0-8.865.373-12.11 1.109l-.787 2.955c3.141-.957 7.442-1.439 12.92-1.439 2.625 0 5.072.136 7.315.398 2.252.262 4.106.601 5.554 1.016m-.643-7.417c-3.04-.838-7.095-1.262-12.15-1.262-5.097 0-9.195.432-12.302 1.287l.373 2.506c3.124-.813 7.095-1.219 11.93-1.219 4.809 0 8.729.398 11.752 1.194l.398-2.506m-11.362-4.293c2.845.051 5.182.195 7 .423 1.812.229 3.454.508 4.911.821.906-.898 1.913-1.744 3.02-2.557 1.109-.813 1.888-1.507 2.337-2.083.787-1.075 1.185-2.413 1.185-4.02 0-1.465-.356-2.701-1.067-3.692-1.27-1.871-3.217-2.803-5.825-2.803-1.524 0-3.107.33-4.767.991-1.507.593-2.591 1.236-3.277 1.93-1.405 1.363-2.43 3.15-3.073 5.359-.245.762-.381 1.727-.406 2.904-.025 1.177-.042 2.083-.042 2.726m1.812-1.93c0-.483.059-1.16.161-2.049.11-.881.279-1.575.508-2.074.618-1.338 1.49-2.574 2.633-3.717.33-.33 1.041-.779 2.134-1.338 1.075-.533 2.227-.796 3.446-.796.931 0 1.846.161 2.769.483.914.322 1.609.813 2.066 1.482.415.559.627 1.465.627 2.726 0 .991-.406 1.913-1.219 2.777-.525.542-1.101 1.092-1.71 1.651-.61.55-1.202 1.202-1.761 1.947-.957-.33-2.294-.593-4-.77-1.71-.186-3.59-.288-5.647-.322"/></svg>';

var bK$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': bK
});

var bQ = '<svg xmlns="http://www.w3.org/2000/svg" shape-rendering="geometricPrecision" image-rendering="optimizeQuality" fill-rule="evenodd" clip-rule="evenodd" viewBox="0 0 50 50"><defs><linearGradient id="0" x1="21.253" y1="37.22" x2="77.76" y2="37.36" gradientUnits="userSpaceOnUse"><stop stop-color="#fff"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient></defs><g fill="#1f1a17"><path d="m24.949 10.752c-.94 0-1.744-.33-2.396-.991-.652-.66-.974-1.465-.974-2.405 0-.931.322-1.727.974-2.388.652-.66 1.456-.991 2.396-.991.923 0 1.727.33 2.396.991.669.66.999 1.456.999 2.388 0 .94-.33 1.744-.999 2.405-.669.66-1.473.991-2.396.991"/><path d="m40.23 43.942c-.813.711-2.633 1.304-5.461 1.786-2.828.474-6.087.72-9.77.72-3.751 0-7.05-.254-9.898-.745-2.845-.499-4.64-1.118-5.385-1.863l1.566-5.952-.694-3.895-2.184-3.793-2.108-15.426 1.211-.474 6.799 11.455.152-13.64 1.685-.296 5.182 13.716 2.777-14.757h1.719l2.777 14.707 5.131-13.665 1.71.296.152 13.64 6.824-11.481 1.16.542-2.057 15.359-2.21 3.793-.694 3.946 1.617 6.03"/><path d="m14.535 11.989c-.948 0-1.753-.322-2.413-.974-.66-.652-.991-1.456-.991-2.396 0-.923.33-1.719.991-2.379.66-.66 1.465-.991 2.413-.991.923 0 1.719.33 2.379.991.66.66.991 1.456.991 2.379 0 .94-.33 1.744-.991 2.396-.66.652-1.456.974-2.379.974"/><path d="m35.36 11.989c-.94 0-1.736-.322-2.388-.974-.652-.652-.982-1.456-.982-2.396 0-.923.33-1.719.982-2.379.652-.66 1.448-.991 2.388-.991.948 0 1.753.33 2.413.991.66.66.991 1.456.991 2.379 0 .94-.33 1.744-.991 2.396-.66.652-1.465.974-2.413.974"/><path d="m5.4 14.723c-.94 0-1.736-.33-2.388-.982-.652-.652-.982-1.448-.982-2.396 0-.923.33-1.719.982-2.388.652-.677 1.448-1.01 2.388-1.01.948 0 1.744.33 2.413 1.01.66.669.991 1.465.991 2.388 0 .948-.33 1.744-.991 2.396-.669.652-1.465.982-2.413.982"/><path d="m44.541 14.723c-.94 0-1.744-.33-2.405-.982-.66-.652-.991-1.448-.991-2.396 0-.923.33-1.719.991-2.388.66-.677 1.465-1.01 2.405-1.01.931 0 1.727.33 2.388 1.01.66.669.991 1.465.991 2.388 0 .948-.33 1.744-.991 2.396-.66.652-1.456.982-2.388.982"/></g><path fill="url(#0)" d="m37.2 35.729c-3.04-.838-7.095-1.262-12.15-1.262-5.097 0-9.195.432-12.302 1.287l.373 2.506c3.124-.813 7.095-1.219 11.93-1.219 4.809 0 8.729.398 11.752 1.194l.398-2.506m1.736-4.437c-1.372-.5-3.302-.906-5.791-1.228-2.489-.322-5.232-.483-8.246-.483-2.946 0-5.639.152-8.09.457-2.447.305-4.377.703-5.783 1.202l1.245 2.252c1.389-.406 3.192-.703 5.41-.889 2.21-.178 4.631-.271 7.264-.271 2.633 0 5.063.093 7.29.271 2.235.186 4.047.491 5.436.914l1.261-2.227m-1.092 11.853l-.737-2.929c-3.226-.737-7.281-1.109-12.158-1.109-4.826 0-8.865.373-12.11 1.109l-.787 2.955c3.141-.957 7.442-1.439 12.92-1.439 2.625 0 5.072.136 7.315.398 2.252.262 4.106.601 5.554 1.016"/></svg>';

var bQ$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': bQ
});

var bB = '<svg xmlns="http://www.w3.org/2000/svg" shape-rendering="geometricPrecision" image-rendering="optimizeQuality" fill-rule="evenodd" clip-rule="evenodd" viewBox="0 0 50 50"><defs><linearGradient id="0" x1="21.09" y1="37.1" x2="77.67" y2="37.469" gradientUnits="userSpaceOnUse"><stop stop-color="#fff"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient></defs><path d="m25 42.16c-.229.94-.517 1.592-.847 1.956-.33.364-.762.745-1.312 1.143-.593.415-1.295.762-2.108 1.05-.813.288-1.71.364-2.701.212l-6.968-.965c-.288-.034-.533-.034-.762 0-.22.034-.432.051-.635.051-.347 0-.787.076-1.321.237-.542.152-.957.381-1.253.677l-2.404-3.946c.296-.33.559-.559.787-.694.237-.127.508-.271.821-.415.957-.449 1.981-.72 3.073-.821.466-.034.923-.042 1.363-.025.449.017.914 0 1.397-.051.889.152 1.786.288 2.684.406.906.127 1.812.254 2.718.39.991 0 1.66-.102 2.01-.296.186-.102.474-.288.872-.55.398-.262.796-.652 1.194-1.168-.881-.093-1.77-.262-2.684-.508-.906-.237-1.71-.491-2.404-.754l2.582-6.401c-1.295-.745-2.193-1.338-2.709-1.795-.508-.457-.914-.982-1.211-1.575-.432-.762-.711-1.499-.83-2.21-.127-.711-.178-1.346-.161-1.913.017-.991.245-2.083.703-3.285.457-1.194 1.312-2.269 2.565-3.209 1.041-.796 2.066-1.617 3.057-2.455.991-.847 1.973-1.829 2.946-2.955-1.219-.627-1.829-1.626-1.829-2.997 0-.931.322-1.719.974-2.388.652-.66 1.456-.991 2.396-.991.923 0 1.719.33 2.379.991.66.669.991 1.456.991 2.388 0 1.355-.61 2.354-1.829 2.997.957 1.126 1.93 2.108 2.913 2.955.982.838 2.02 1.659 3.09 2.455 1.236.94 2.083 2.01 2.523 3.209.449 1.202.694 2.295.72 3.285 0 .567-.051 1.202-.169 1.913-.118.711-.381 1.448-.796 2.21-.33.593-.745 1.118-1.253 1.575-.5.457-1.389 1.05-2.667 1.795l2.582 6.401c-.728.263-1.549.517-2.455.754-.914.246-1.787.415-2.633.508.381.517.771.906 1.168 1.168.398.263.694.449.897.55.347.195 1.016.296 2.01.296.889-.136 1.787-.263 2.692-.39.898-.118 1.803-.254 2.718-.406.44.051.889.068 1.346.051.457-.017.923-.008 1.406.025 1.058.102 2.083.373 3.073.821.296.144.567.288.804.415.245.135.508.364.804.694l-2.43 3.946c-.296-.296-.711-.525-1.253-.677-.533-.161-.965-.237-1.295-.237-.22 0-.44-.017-.66-.051-.22-.034-.474-.034-.754 0l-6.951.965c-.991.152-1.913.085-2.76-.195-.855-.279-1.558-.652-2.1-1.118-.542-.449-.982-.83-1.304-1.151-.322-.322-.593-.957-.804-1.897" fill="#1f1a17"/><path d="m24.09 23.705v2.108c0 .61.305.914.914.914.61 0 .914-.305.914-.914v-2.134h2.235c.576 0 .872-.296.872-.897 0-.593-.296-.889-.872-.889h-2.235v-2.235c0-.61-.305-.914-.914-.914-.61 0-.914.305-.914.914v2.235h-2.184c-.584 0-.872.296-.872.889 0 .601.288.897.872.897l2.184.025m7.51 13.741l-1.041-2.531c-1.685-.364-3.539-.542-5.554-.542-1.998 0-3.835.178-5.503.542l-1.041 2.506c2.049-.516 4.233-.77 6.545-.77 2.286 0 4.479.262 6.596.796m-2.083-5.114l-.72-1.736v-.669c-1.253-.178-2.523-.271-3.793-.271-1.236 0-2.498.093-3.768.271l-.025.669-.669 1.736c1.405-.246 2.887-.373 4.462-.373 1.592 0 3.09.127 4.513.373m-.864 9.381c-.66-.499-1.329-1.287-1.99-2.362h-.787c0 .813.186 1.6.567 2.362h2.21m-5.114 0c.381-.813.576-1.6.576-2.362h-.796c-.643 1.058-1.312 1.846-2.02 2.362h2.235" fill="url(#0)"/></svg>';

var bB$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': bB
});

var wP = '<svg xmlns="http://www.w3.org/2000/svg" shape-rendering="geometricPrecision" image-rendering="optimizeQuality" fill-rule="evenodd" clip-rule="evenodd" viewBox="0 0 50 50"><defs><linearGradient id="0" gradientUnits="userSpaceOnUse" x1="21.13" y1="37.35" x2="77.76" y2="37.469" gradientTransform="matrix(1 0 0 .97324 0 1.243)"><stop stop-color="#fff"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient></defs><path d="m25 46.45h-13.394c-.66-1.607-.991-3.288-.991-5.04 0-2.975.864-5.644 2.599-8.02 1.736-2.365 3.971-4.054 6.697-5.068-1.168-.527-2.125-1.327-2.862-2.398-.737-1.071-1.101-2.283-1.101-3.634 0-1.689.576-3.156 1.736-4.392 1.152-1.244 2.574-1.961 4.267-2.151-1.346-.981-2.02-2.282-2.02-3.889 0-1.351.491-2.513 1.482-3.477.982-.964 2.176-1.442 3.581-1.442 1.389 0 2.582.478 3.573 1.442.991.964 1.49 2.126 1.49 3.477 0 1.607-.669 2.909-2.02 3.889 1.693.19 3.116.906 4.267 2.151 1.16 1.236 1.736 2.703 1.736 4.392 0 1.351-.373 2.563-1.126 3.634-.753 1.071-1.71 1.87-2.862 2.398 2.726 1.014 4.961 2.703 6.697 5.068 1.736 2.373 2.599 5.04 2.599 8.02 0 1.739-.322 3.42-.965 5.04h-13.394" fill="#1f1a17"/><path d="m25 44.808h12.175c.347-1.154.525-2.291.525-3.403 0-2.513-.711-4.787-2.142-6.831-1.431-2.044-3.277-3.552-5.52-4.516-1.584-.62-1.643-.659-1.643-1.739 0-.849.559-1.475 1.668-1.879 1.532-1.047 2.303-2.431 2.303-4.153 0-1.244-.432-2.324-1.287-3.263-.864-.931-1.905-1.467-3.124-1.615-.999-.082-1.49-.626-1.49-1.64 0-.453.178-.873.542-1.261.898-.676 1.346-1.557 1.346-2.653 0-.898-.339-1.673-.999-2.316-.66-.643-1.448-.964-2.354-.964-.94 0-1.744.321-2.396.964-.652.643-.974 1.417-.974 2.316 0 1.079.44 1.961 1.338 2.653.364.354.542.775.542 1.261 0 1.014-.483 1.557-1.465 1.64-1.236.148-2.286.684-3.133 1.615-.855.939-1.279 2.02-1.279 3.263 0 1.722.77 3.106 2.303 4.153 1.109.412 1.668 1.046 1.668 1.879 0 1.079-.067 1.118-1.668 1.739-2.244.964-4.081 2.472-5.503 4.516-1.422 2.044-2.134 4.318-2.134 6.831 0 1.195.178 2.324.525 3.403h12.175" fill="url(#0)"/></svg>';

var wP$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': wP
});

var wR = '<svg xmlns="http://www.w3.org/2000/svg" shape-rendering="geometricPrecision" image-rendering="optimizeQuality" fill-rule="evenodd" clip-rule="evenodd" viewBox="0 0 50 50"><defs><linearGradient id="0" x1="21.376" x2="77.64" gradientUnits="userSpaceOnUse"><stop stop-color="#fff"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient></defs><path fill="#1f1a17" d="m28.408 9.22h4.216v-3.395h6.796v9.295l-5.5 4.243v11.857l4.22 4.221v5.08h3.789v5.929h-33.859v-5.929h3.794v-5.08l4.246-4.221v-11.857l-5.508-4.243v-9.295h6.774v3.395h4.242v-3.395h6.79z"/><path fill="url(#0)" d="m33.07 17.678l3.15-2.557h-22.42l3.175 2.557h16.1m7.197 24.528h-30.514v2.557h30.514v-2.557m-3.844-5.05h-22.826v3.37h22.826v-3.37m-4.216-17.788h-14.393v11.862h14.393v-11.862m5.503-5.927v-5.927h-3.395v3.395h-7.645v-3.395h-3.344v3.395h-7.62v-3.395h-3.395v5.927h25.4m-1.913 22l-2.548-2.532h-16.451l-2.599 2.532h21.598"/></svg>';

var wR$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': wR
});

var wN = '<svg xmlns="http://www.w3.org/2000/svg" shape-rendering="geometricPrecision" image-rendering="optimizeQuality" fill-rule="evenodd" clip-rule="evenodd" viewBox="0 0 50 50"><defs><linearGradient id="0" x1="21.405" x2="77.64" gradientUnits="userSpaceOnUse"><stop stop-color="#fff"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient></defs><path fill="#1f1a17" d="m26.18 9.395c2.599.169 5 .838 7.222 2.02 2.21 1.168 4.098 2.675 5.656 4.513 1.092 1.287 2.117 2.845 3.082 4.665.974 1.812 1.744 3.742 2.32 5.774.66 2.371 1.084 4.851 1.253 7.459.178 2.599.263 5.01.263 7.23v5.402c0 0-1.287 0-3.861 0-2.565 0-5.901 0-10.01 0h-16.637c-.152 0-.22-.406-.212-1.211.008-.813.059-1.465.161-1.964.059-.398.22-.957.466-1.685.254-.728.66-1.609 1.245-2.65.262-.533.889-1.304 1.88-2.32.999-1.016 2.134-2.201 3.429-3.539.745-.762 1.321-1.719 1.744-2.879.423-1.151.601-2.201.533-3.15-.61.5-1.279.906-2.01 1.219-3.505 1.253-6.05 3.073-7.611 5.452-.119.152-.491.821-1.118 2.02-.33.627-.618 1.058-.847 1.287-.313.313-.771.491-1.363.525-.923.042-1.643-.398-2.159-1.346-.694.203-1.312.288-1.863.254-.923-.347-1.592-.72-2.01-1.118-.847-.847-1.389-1.685-1.651-2.532-.254-.847-.381-1.753-.381-2.726 0-1.389.855-3.226 2.582-5.512 2.02-2.625 3.09-4.631 3.217-6 0-.593.059-1.262.178-2.01.102-.517.305-1.01.618-1.49.22-.33.364-.559.432-.677.076-.127.212-.313.415-.559.144-.203.271-.356.373-.457.093-.11.22-.254.373-.44.178-.212.406-.457.694-.745-.88-2.413-1.236-4.902-1.067-7.459 3.285 1.168 6.05 3.01 8.28 5.529.55-1.871 1.626-3.387 3.226-4.538 1.321.923 2.371 2.151 3.15 3.666"/><path fill="url(#0)" d="m42.976 44.693c-.017 0 0-.449.042-1.346.051-.906.076-1.88.076-2.921.017-2.066.017-4.2 0-6.409-.017-2.21-.313-4.411-.889-6.613-.567-2.117-1.185-3.92-1.863-5.419-.677-1.499-1.414-2.786-2.21-3.878-1.185-1.786-2.811-3.302-4.86-4.538-2.049-1.245-4.191-2.057-6.426-2.438.152.813.22 1.609.203 2.388-.034.593-.313.889-.847.889-.61 0-.881-.296-.821-.889.051-2.184-.728-4.056-2.328-5.605-1.253 1.321-1.939 2.853-2.032 4.606-.034.584-.33.838-.897.771-.525-.017-.787-.322-.787-.914 0 0 .017-.068.042-.203-.677.22-1.389.525-2.134.923-.474.33-.864.245-1.16-.246-.296-.499-.169-.889.398-1.168.711-.364 1.245-.635 1.609-.821-1.422-1.456-3.04-2.625-4.86-3.522.195 2.303.83 4.47 1.888 6.528.279.423.212.804-.203 1.135-.466.364-.855.313-1.168-.169-.11-.169-.279-.466-.491-.897-.347.347-.584.61-.694.77-.118.152-.322.483-.61.991-.288.516-.499.94-.635 1.27-.144.415-.212.745-.186 1.01.025.254.051.533.068.855-.152.974-.491 1.888-1.01 2.752-.525.855-1.185 1.905-1.998 3.15-.779 1.185-1.372 2.083-1.786 2.675-.415.601-.728 1.355-.94 2.286-.152.559-.152 1.245 0 2.041.144.804.474 1.431.965 1.88.762.77 1.499 1.126 2.21 1.067.229 0 .542-.093.931-.279.389-.178.686-.525.906-1.041.423-.94.779-1.414 1.067-1.414.406 0 .635.237.669.694 0 .102-.136.517-.398 1.245-.152.33-.347.677-.593 1.041-.322.432-.457.61-.423.542.262.948.703 1.109 1.312.499.178-.178.389-.525.618-1.016.237-.499.601-1.168 1.092-2.01.584-.982 1.202-1.77 1.863-2.388.66-.61 1.245-1.109 1.761-1.482.296-.22.66-.466 1.092-.745.432-.288 1.01-.576 1.736-.872.576-.229 1.219-.516 1.922-.855.703-.339 1.329-.77 1.871-1.304.762-.745 1.346-1.659 1.761-2.752.22-.61.296-1.363.245-2.261-.144-.559.136-.838.847-.838.533 0 .83.271.898.821 0 1.863-.533 3.564-1.592 5.105.347 1.058.44 2.218.271 3.471-.144 1.01-.5 2.091-1.05 3.243-.559 1.143-1.676 2.422-3.361 3.827-3.429 2.845-5.05 5.774-4.86 8.78 0 0 1.405 0 4.225 0 2.819 0 5.47 0 7.95 0h13.572m-33.638-15.08c-.483.296-.77.694-.872 1.194.017.542-.237.838-.762.889-.584.068-.881-.178-.898-.745.068-1.092.55-1.956 1.465-2.599.432-.347.83-.322 1.194.093.364.449.322.838-.127 1.168m7.366-11.828c.212.33.296.677.246 1.041-.161 1.058-.754 1.499-1.761 1.338-.296-.051-.533-.152-.72-.296-.059.076-.161.262-.296.542-.178.533-.525.711-1.041.55-.508-.203-.711-.576-.593-1.118.745-1.905 2.091-3.209 4.04-3.92.567-.169.94 0 1.118.491.203.533.051.898-.449 1.092-.093.051-.186.102-.271.136-.085.042-.169.093-.271.144"/></svg>';

var wN$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': wN
});

var wK = '<svg xmlns="http://www.w3.org/2000/svg" shape-rendering="geometricPrecision" image-rendering="optimizeQuality" fill-rule="evenodd" clip-rule="evenodd" viewBox="0 0 50 50"><defs><linearGradient id="0" x1="21.376" x2="77.64" gradientUnits="userSpaceOnUse"><stop stop-color="#fff"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient></defs><g fill="#1f1a17"><path d="m25.821 12.02h-1.761v-3.251h-2.066c-.559 0-.838-.271-.838-.821v-.025c0-.542.279-.813.838-.813h2.066v-2.108c0-.584.296-.872.889-.872.576 0 .872.288.872.872v2.108h2.134c.542 0 .813.271.813.813v.025c0 .55-.271.821-.813.821l-2.117.025-.017 3.226"/><path d="m11.03 37.744l-.813-4.64c-.017 0-.042-.034-.076-.102-.085-.118-.322-.271-.711-.457-.381-.195-.838-.516-1.346-.982-.728-.61-1.295-1.109-1.702-1.49-.406-.373-.771-.787-1.101-1.236-1.01-1.389-1.575-3.065-1.685-5.04-.169-1.897.601-3.793 2.303-5.681 1.719-1.88 4.047-2.769 6.968-2.65 1.092.068 2.379.33 3.844.796.483.195.974.39 1.482.576.5.195.999.389 1.499.584.262.135.5.271.694.398-.085-.347-.127-.694-.127-1.041 0-1.287.457-2.388 1.38-3.302.914-.906 2.024-1.372 3.311-1.389 1.287 0 2.388.466 3.302 1.38.906.914 1.363 2.02 1.363 3.285 0 .262-.034.61-.102 1.041.229-.144.457-.271.669-.372.762-.33 1.761-.72 3.01-1.16 1.422-.483 2.701-.754 3.844-.821 2.921-.136 5.241.754 6.943 2.65 1.668 1.888 2.447 3.785 2.328 5.681-.127 1.973-.703 3.649-1.71 5.04-.33.449-.703.864-1.118 1.253-.406.39-.965.881-1.66 1.473-.542.466-1.01.796-1.389.982-.381.186-.601.347-.669.457-.017.034-.034.059-.051.076-.017.017-.025.034-.025.051l-.796 4.665 1.643 6.121c-.83.745-2.684 1.355-5.554 1.837-2.879.483-6.206.72-9.974.72-3.835 0-7.214-.254-10.118-.754-2.912-.508-4.741-1.143-5.486-1.897l1.634-6.05"/></g><path fill="url(#0)" d="m25.796 29.532c2.845.034 5.444.203 7.806.508 2.371.305 4.225.694 5.563 1.151.627-.491 1.312-1.041 2.057-1.651.745-.601 1.363-1.219 1.863-1.846.787-1.01 1.185-2.337 1.185-3.996 0-1.482-.356-2.726-1.067-3.717-1.27-1.854-3.209-2.777-5.8-2.777-1.558 0-3.15.322-4.792.965-1.439.584-2.532 1.228-3.268 1.939-1.389 1.389-2.421 3.175-3.082 5.351-.229.779-.364 1.49-.406 2.125-.042.635-.059 1.287-.059 1.947m-13.25 6.697c3.141-.796 7.307-1.194 12.505-1.194 5.089 0 9.203.381 12.327 1.143l.618-3.649c-3.327-.872-7.671-1.312-13.05-1.312-5.41 0-9.745.449-13.02 1.338l.618 3.675m25.298 4.411l-.737-2.845c-3.277-.728-7.332-1.092-12.158-1.092-4.809 0-8.856.364-12.133 1.092l-.787 2.87c3.158-.923 7.468-1.389 12.945-1.389 5.444 0 9.728.457 12.869 1.363m.652 2.337c-3.192-1.287-7.679-1.939-13.445-1.939-5.986 0-10.516.66-13.598 1.99 2.913 1.151 7.417 1.736 13.521 1.736 2.913 0 5.563-.161 7.959-.483 2.404-.322 4.25-.762 5.563-1.304m-14.419-13.445c-.008-.643-.034-1.287-.068-1.922-.034-.635-.161-1.346-.372-2.125-.677-2.21-1.702-3.996-3.082-5.351-.711-.694-1.795-1.346-3.268-1.939-1.685-.66-3.285-.991-4.792-.991-2.608 0-4.547.931-5.8 2.802-.711.991-1.067 2.235-1.067 3.717 0 1.626.398 2.955 1.185 3.996.483.61 1.092 1.228 1.837 1.837.745.61 1.439 1.168 2.083 1.66 2.896-1.041 7.341-1.6 13.343-1.685m.872-4.614c.119-.466.212-.787.296-.965.169-.643.356-1.194.576-1.643.093-.279.237-.601.432-.974.186-.373.389-.804.61-1.279.127-.279.271-.627.415-1.033.152-.406.305-.804.449-1.202.135-.33.203-.686.203-1.067 0-.813-.296-1.499-.872-2.066-.576-.576-1.279-.864-2.108-.864-1.964 0-2.955.991-2.955 2.955 0 .381.068.737.203 1.067.364 1.075.643 1.82.838 2.235.22.474.415.906.601 1.279.178.372.339.694.466.974.22.55.398 1.092.55 1.643.034.093.127.415.296.94"/></svg>';

var wK$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': wK
});

var wQ = '<svg xmlns="http://www.w3.org/2000/svg" shape-rendering="geometricPrecision" image-rendering="optimizeQuality" fill-rule="evenodd" clip-rule="evenodd" viewBox="0 0 50 50"><defs><linearGradient id="0" x1="21.253" y1="37.22" x2="77.64" y2="37.35" gradientUnits="userSpaceOnUse"><stop stop-color="#fff"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient></defs><g stroke="#1f1a17" stroke-width=".076"><path fill="#1f1a17" d="m44.541 14.723c-.94 0-1.744-.33-2.405-.982-.66-.652-.991-1.448-.991-2.396 0-.923.33-1.719.991-2.388.66-.677 1.465-1.01 2.405-1.01.931 0 1.727.33 2.388 1.01.66.669.991 1.465.991 2.388 0 .948-.33 1.744-.991 2.396-.66.652-1.456.982-2.388.982zm-4.31 29.22c-.813.711-2.633 1.304-5.461 1.786-2.828.474-6.087.72-9.77.72-3.751 0-7.05-.254-9.898-.745-2.845-.499-4.64-1.118-5.385-1.863l1.566-5.952-.694-3.895-2.184-3.793-2.108-15.426 1.211-.474 6.799 11.455.152-13.64 1.685-.296 5.182 13.716 2.777-14.757h1.719l2.777 14.707 5.131-13.665 1.71.296.152 13.64 6.824-11.481 1.16.542-2.057 15.359-2.21 3.793-.694 3.946 1.617 6.03zm-25.696-31.953c-.948 0-1.753-.322-2.413-.974-.66-.652-.991-1.456-.991-2.396 0-.923.33-1.719.991-2.379.66-.66 1.465-.991 2.413-.991.923 0 1.719.33 2.379.991.66.66.991 1.456.991 2.379 0 .94-.33 1.744-.991 2.396-.66.652-1.456.974-2.379.974zm-9.136 2.735c-.94 0-1.736-.33-2.388-.982-.652-.652-.982-1.448-.982-2.396 0-.923.33-1.719.982-2.388.652-.677 1.448-1.01 2.388-1.01.948 0 1.744.33 2.413 1.01.66.669.991 1.465.991 2.388 0 .948-.33 1.744-.991 2.396-.669.652-1.465.982-2.413.982zm19.55-3.971c-.94 0-1.744-.33-2.396-.991-.652-.66-.974-1.465-.974-2.405 0-.931.322-1.727.974-2.388.652-.66 1.456-.991 2.396-.991.923 0 1.727.33 2.396.991.669.66.999 1.456.999 2.388 0 .94-.33 1.744-.999 2.405-.669.66-1.473.991-2.396.991zm10.414 1.236c-.94 0-1.736-.322-2.388-.974-.652-.652-.982-1.456-.982-2.396 0-.923.33-1.719.982-2.379.652-.66 1.448-.991 2.388-.991.948 0 1.753.33 2.413.991.66.66.991 1.456.991 2.379 0 .94-.33 1.744-.991 2.396-.66.652-1.465.974-2.413.974z"/><path fill="url(#0)" d="m38.22 43.04c-3.02-1.253-7.417-1.88-13.166-1.88-5.876 0-10.312.643-13.327 1.93 2.896 1.143 7.315 1.71 13.25 1.71 2.845 0 5.444-.152 7.798-.466 2.362-.313 4.174-.745 5.444-1.295zm-13.267-34.03c1.109 0 1.66-.559 1.66-1.659 0-1.092-.55-1.643-1.66-1.643-1.092 0-1.634.55-1.634 1.643 0 1.101.542 1.659 1.634 1.659zm12.624 24.977c-3.192-.813-7.366-1.211-12.522-1.211-5.292 0-9.517.406-12.675 1.236l.373 2.379c3.217-.762 7.324-1.143 12.302-1.143 4.944 0 8.975.373 12.1 1.118l.423-2.379zm.618-1.49l1.617-2.853c-.796.322-1.609.474-2.43.474-2.218 0-3.988-.897-5.309-2.701-.991.821-2.1 1.236-3.327 1.236-1.583 0-2.853-.618-3.793-1.863-1.058 1.16-2.32 1.744-3.793 1.744-1.194 0-2.286-.406-3.277-1.219-1.389 1.77-3.183 2.65-5.385 2.65-.838 0-1.676-.152-2.506-.466l1.736 2.972c3.209-.923 7.62-1.389 13.225-1.389 5.706 0 10.118.474 13.242 1.414zm-11.11-5.927l-2.108-12.133-2.108 11.989c.051-.034.161-.119.347-.254.381-.745.957-1.118 1.736-1.118.847 0 1.389.372 1.634 1.118.102.102.271.237.5.398zm6.867.474v-11.489l-4.089 11.261c.313-.11.576-.262.796-.44.33-.415.779-.627 1.338-.627.66 0 1.194.296 1.592.872.042.068.102.136.169.212.068.076.136.144.195.212zm-13.936-.347l-4.064-11.142v11.337c.042-.068.119-.144.22-.245.33-.694.872-1.041 1.634-1.041.627 0 1.143.262 1.541.796.449.195.669.296.669.296zm-6.299 1.389l-5.334-9.203 1.363 8.382c.94.66 1.863.991 2.752.991.347 0 .754-.059 1.219-.169zm22.394.119c.381.119.804.178 1.27.178 1.01 0 1.947-.313 2.828-.94l1.363-8.585-5.461 9.347zm1.49 12.556l-.745-2.802c-3.243-.711-7.205-1.067-11.904-1.067-4.648 0-8.611.356-11.879 1.067l-.771 2.828c3.073-.931 7.298-1.389 12.675-1.389 5.241 0 9.449.449 12.624 1.363zm-23.06-30.514c1.084 0 1.634-.542 1.634-1.634 0-1.092-.55-1.634-1.634-1.634-1.109 0-1.668.542-1.668 1.634 0 1.092.559 1.634 1.668 1.634zm20.828 0c1.109 0 1.668-.542 1.668-1.634 0-1.092-.559-1.634-1.668-1.634-1.084 0-1.634.542-1.634 1.634 0 1.092.55 1.634 1.634 1.634zm-29.964 2.735c1.109 0 1.668-.55 1.668-1.643 0-1.109-.559-1.659-1.668-1.659-1.084 0-1.634.55-1.634 1.659 0 1.092.55 1.643 1.634 1.643zm39.14 0c1.092 0 1.642-.55 1.642-1.643 0-1.109-.55-1.659-1.642-1.659-1.101 0-1.66.55-1.66 1.659 0 1.092.559 1.643 1.66 1.643z"/></g></svg>';

var wQ$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': wQ
});

var wB = '<svg xmlns="http://www.w3.org/2000/svg" shape-rendering="geometricPrecision" image-rendering="optimizeQuality" fill-rule="evenodd" clip-rule="evenodd" viewBox="0 0 50 50"><defs><linearGradient id="0" x1="21.13" y1="37.592" x2="77.64" y2="37.469" gradientUnits="userSpaceOnUse"><stop stop-color="#fff"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient></defs><path fill="#1f1a17" d="m25.447 42.01c-.229.94-.517 1.592-.847 1.956-.33.364-.762.745-1.312 1.143-.593.415-1.295.762-2.108 1.05-.813.288-1.71.364-2.701.212l-6.968-.965c-.288-.034-.533-.034-.762 0-.22.034-.432.051-.635.051-.347 0-.787.076-1.321.237-.542.152-.957.381-1.253.677l-2.405-3.946c.296-.33.559-.559.787-.694.237-.127.508-.271.821-.415.957-.449 1.981-.72 3.073-.821.466-.034.923-.042 1.363-.025.449.017.914 0 1.397-.051.889.152 1.786.288 2.684.406.906.127 1.812.254 2.718.389.991 0 1.66-.102 2.01-.296.186-.102.474-.288.872-.55.398-.262.796-.652 1.194-1.168-.881-.093-1.77-.262-2.684-.508-.906-.237-1.71-.491-2.404-.754l2.582-6.401c-1.295-.745-2.193-1.338-2.709-1.795-.508-.457-.914-.982-1.211-1.575-.432-.762-.711-1.499-.83-2.21-.127-.711-.178-1.346-.161-1.913.017-.991.245-2.083.703-3.285.457-1.194 1.312-2.269 2.565-3.209 1.041-.796 2.066-1.617 3.057-2.455.991-.847 1.973-1.829 2.946-2.955-1.219-.627-1.829-1.626-1.829-2.997 0-.931.322-1.719.974-2.388.652-.66 1.456-.991 2.396-.991.923 0 1.719.33 2.379.991.66.669.991 1.456.991 2.388 0 1.355-.61 2.354-1.829 2.997.957 1.126 1.93 2.108 2.913 2.955.982.838 2.02 1.66 3.09 2.455 1.236.94 2.083 2.02 2.523 3.209.449 1.202.694 2.294.72 3.285 0 .567-.051 1.202-.169 1.913-.118.711-.381 1.448-.796 2.21-.33.593-.745 1.118-1.253 1.575-.5.457-1.389 1.05-2.667 1.795l2.582 6.401c-.728.263-1.549.517-2.455.754-.914.246-1.787.415-2.633.508.381.517.77.906 1.168 1.168.398.263.694.449.898.55.347.195 1.016.296 2.01.296.889-.136 1.786-.263 2.692-.389.898-.118 1.803-.254 2.718-.406.44.051.889.068 1.346.051.457-.017.923-.008 1.405.025 1.058.102 2.083.373 3.073.821.296.144.567.288.804.415.245.135.508.364.804.694l-2.43 3.946c-.296-.296-.711-.525-1.253-.677-.533-.161-.965-.237-1.295-.237-.22 0-.44-.017-.66-.051-.22-.034-.474-.034-.754 0l-6.951.965c-.991.152-1.913.085-2.76-.195-.855-.279-1.558-.652-2.1-1.118-.542-.449-.982-.83-1.304-1.151-.322-.322-.593-.957-.804-1.897"/><path fill="url(#0)" d="m26.32 39.2c0 1.092.245 2.024.753 2.794.5.77 1.041 1.372 1.626 1.795.906.669 2.235.999 3.988.999.432 0 1.279-.093 2.532-.279 1.025-.161 1.854-.279 2.481-.356.627-.076 1.05-.135 1.27-.186.627-.085 1.287-.068 1.981.051.262.068.559.127.88.186.322.059.593.186.804.381l1.194-1.93c-.677-.347-1.397-.593-2.159-.72-1.253-.22-2.354-.263-3.302-.152-.279.034-.643.118-1.101.245-.457.136-1.067.263-1.846.373-1.676.271-2.557.398-2.659.398-.644 0-1.202-.076-1.685-.246-.483-.169-.906-.347-1.287-.542-.881-.398-1.77-1.338-2.684-2.811h-.787m-1.761 0h-.796c-.931 1.49-1.812 2.43-2.659 2.811-.398.195-.83.373-1.312.542-.483.169-1.033.246-1.66.246-.119 0-.999-.127-2.659-.398-.787-.11-1.422-.237-1.88-.373-.466-.127-.83-.212-1.092-.245-.948-.11-2.04-.068-3.302.152-.762.127-1.473.373-2.134.72l1.194 1.93c.195-.195.457-.322.779-.381.322-.059.618-.118.88-.186.694-.119 1.355-.136 1.981-.051.22.051.643.11 1.27.186.627.076 1.465.195 2.506.356 1.236.186 2.083.279 2.532.279 1.736 0 3.065-.33 3.988-.999.567-.423 1.101-1.025 1.6-1.795.508-.77.762-1.702.762-2.794m.889-9.347c1.6 0 3.141.127 4.614.373 1.617-.576 2.794-1.482 3.522-2.701.627-1.058.94-2.227.94-3.497 0-.762-.186-1.6-.567-2.523-.381-.914-.999-1.744-1.863-2.489-.974-.813-2.04-1.702-3.2-2.667-1.151-.965-2.303-2.1-3.446-3.387-1.16 1.287-2.311 2.422-3.471 3.387-1.16.965-2.218 1.854-3.175 2.667-.881.745-1.499 1.575-1.871 2.489-.372.923-.559 1.761-.559 2.523 0 1.27.305 2.438.914 3.497.711 1.219 1.897 2.125 3.548 2.701 1.456-.246 2.997-.373 4.614-.373m0 4.513c1.939 0 3.793.195 5.579.576l-1.185-3.057c-1.456-.229-2.921-.347-4.394-.347-1.507 0-2.98.119-4.411.347l-1.194 3.057c1.77-.381 3.641-.576 5.605-.576m0-23.537c1.126 0 1.685-.559 1.685-1.685 0-1.126-.559-1.693-1.685-1.693-1.126 0-1.685.567-1.685 1.693 0 1.126.559 1.685 1.685 1.685m0 27.01c1.126 0 2.218-.093 3.285-.279 1.067-.195 2.1-.423 3.09-.686-1.939-.508-4.064-.77-6.375-.77-2.345 0-4.47.263-6.375.77.957.263 1.973.491 3.048.686 1.075.186 2.184.279 3.327.279m-.889-14.334l-2.066-.025c-.559 0-.838-.279-.838-.847 0-.559.279-.838.838-.838h2.066v-2.134c0-.576.296-.872.889-.872.576 0 .872.296.872.872v2.134h2.134c.542 0 .813.279.813.838 0 .567-.271.847-.813.847h-2.134v2.032c0 .601-.296.898-.872.898-.593 0-.889-.296-.889-.898v-2.01"/></svg>';

var wB$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': wB
});

const getImage = (color, type) => {
    if (color === 'white') {
        switch (type) {
            case 'rook':
                return wR$1;
            case 'knight':
                return wN$1;
            case 'bishop':
                return wB$1;
            case 'queen':
                return wQ$1;
            case 'king':
                return wK$1;
            case 'pawn':
                return wP$1;
            default:
                throw new Error('Unknown piece type.');
        }
    }
    else {
        switch (type) {
            case 'rook':
                return bR$1;
            case 'knight':
                return bN$1;
            case 'bishop':
                return bB$1;
            case 'queen':
                return bQ$1;
            case 'king':
                return bK$1;
            case 'pawn':
                return bP$1;
            default:
                throw new Error('Unknown piece type.');
        }
    }
};
class ChessPiece extends Component {
    constructor(props) {
        super(props);
        this.render = () => {
            var image = getImage(this.props.color, this.props.type);
            var width = 50;
            if (this.props.size !== undefined) {
                width = this.props.size;
            }
            return (React.createElement("img", { src: image, alt: "", style: { width: width } }));
        };
    }
}

class ChessBoard extends Component {
    constructor(props) {
        super(props);
        this.cgRef = React.createRef();
        this.mouseX = 0;
        this.mouseY = 0;
        this.hasBound = false;
        this.doPromotion = (piece) => {
            const { chess } = this;
            const from = this.pendingMove[0];
            const to = this.pendingMove[1];
            var oldFen = chess.fen();
            var uci = from.toString().toLowerCase() + to.toString().toLowerCase() + piece;
            var san = uciMoveToSanMove(uci, this.chess);
            if (chess.move({ from, to, promotion: piece })) {
                this.setState({
                    lastMove: [from, to],
                    selectVisible: false
                });
                var newFen = chess.fen();
                var boardMove = {
                    oldFen: oldFen,
                    newFen: newFen,
                    uci: uci,
                    san: san
                };
                this.tryInvokeOnMove(boardMove);
            }
            else {
                console.log('Failed to apply promotion!');
            }
        };
        this.onMove = (from, to) => {
            const { chess } = this;
            const moves = chess.moves({ verbose: true });
            for (let i = 0, len = moves.length; i < len; i++) { /* eslint-disable-line */
                if (moves[i].flags.indexOf("p") !== -1 && moves[i].from === from) {
                    this.pendingMove = [from, to];
                    ContextMenu.show(this.renderContextMenu(), {
                        top: this.mouseY,
                        left: this.mouseX
                    }, () => {
                        console.log('Closed');
                    });
                    this.setState({
                        selectVisible: true,
                        lastMove: [from, to]
                    });
                }
            }
            var chessMove = {
                from: from,
                to: to
            };
            var uci = from.toString().toLowerCase() + to.toString().toLowerCase();
            var oldFen = chess.fen();
            var san = uciMoveToSanMove(uci, chess);
            if (chess.move(chessMove)) {
                var newFen = chess.fen();
                this.setState({ lastMove: [from, to] });
                var boardMove = {
                    oldFen: oldFen,
                    newFen: newFen,
                    uci: uci,
                    san: san
                };
                this.tryInvokeOnMove(boardMove);
            }
        };
        this.render = () => {
            var size = Math.min(this.props.size.width, this.props.size.height);
            var props = {
                width: size,
                height: size,
                resizable: true,
                orientation: this.props.perspective,
                turnColor: this.turnColor(),
                movable: this.calcMovable(),
                lastMove: this.state.lastMove,
                fen: this.props.fen,
                onMove: this.onMove,
                drawable: {
                    onChange: () => this.boardStateChanged(),
                    eraseOnClick: false
                },
                onChange: () => this.boardStateChanged(),
                style: { margin: "auto" },
                ref: (el) => this.cgRef
            };
            const CgWrapper = React.forwardRef((props, ref) => React.createElement(ChessgroundWrapper, Object.assign({}, props, { ref: ref })));
            return React.createElement(CgWrapper, Object.assign({}, props, { ref: this.cgRef }));
        };
        this.tryInvokeOnMove = (m) => {
            if (this.props.onMove !== null && this.props.onMove !== undefined) {
                this.props.onMove(m);
            }
        };
        this.chess = Chess(props.fen);
        this.state = {
            lastMove: null,
            selectVisible: true,
            chessWidth: 100,
            chessHeight: 100,
        };
    }
    renderContextMenu() {
        // return a single element, or nothing to use default browser behavior
        return (React.createElement(Menu, null,
            React.createElement(MenuItem, { text: "Queen", icon: React.createElement("span", { role: "presentation", onClick: () => this.doPromotion('q') },
                    React.createElement(ChessPiece, { color: 'white', type: 'queen' })) }),
            React.createElement(MenuItem, { text: "Rook", icon: React.createElement("span", { role: "presentation", onClick: () => this.doPromotion('r') },
                    React.createElement(ChessPiece, { color: 'white', type: 'rook' })) }),
            React.createElement(MenuItem, { text: "Bishop", icon: React.createElement("span", { role: "presentation", onClick: () => this.doPromotion('b') },
                    React.createElement(ChessPiece, { color: 'white', type: 'bishop' })) }),
            React.createElement(MenuItem, { text: "Knight", icon: React.createElement("span", { role: "presentation", onClick: () => this.doPromotion('n') },
                    React.createElement(ChessPiece, { color: 'white', type: 'knight' })) })));
    }
    componentDidMount() {
        window.addEventListener("mousemove", (e) => this.updateMousePosition(e));
    }
    ;
    componentDidunmount() {
        window.removeEventListener("mousemove", (e) => this.updateMousePosition(e));
    }
    ;
    componentDidUpdate() {
        this.drawShapes();
    }
    boardStateChanged() {
        var cgState;
        if (this.cgRef == null)
            return;
        var cg = this.cgRef.current.cg;
        cgState = cg.state;
        // recreate the visual cues
        var cueShapes = [];
        var highlights = [];
        var shapes = cgState.drawable.shapes;
        if (shapes !== undefined && shapes !== null) {
            shapes.forEach(shape => {
                if ('dest' in shape) {
                    cueShapes.push({
                        orig: shape.orig,
                        dest: shape.dest,
                        brush: shape.brush,
                        auto: false
                    });
                }
                else {
                    highlights.push({
                        square: shape.orig,
                        brush: shape.brush
                    });
                }
            });
        }
        var autoShapes = cgState.drawable.autoShapes;
        if (autoShapes !== undefined && autoShapes !== null) {
            autoShapes.forEach(shape => {
                if ('dest' in shape) {
                    cueShapes.push({
                        orig: shape.orig,
                        dest: shape.dest,
                        brush: shape.brush,
                        auto: true
                    });
                }
            });
        }
        var cues = {
            shapes: cueShapes,
            highlights: highlights
        };
        if (this.props.onCuesChanged !== undefined) {
            try {
                this.props.onCuesChanged(cues);
            }
            catch (err) {
            }
        }
    }
    drawShapes() {
        if (this.cgRef == null)
            return;
        var cg = this.cgRef.current.cg;
        var cues = this.props.cues;
        if (cues === undefined)
            return;
        var autoShapes = [];
        var nonAutoShapes = [];
        var shapes = [];
        if (cues.shapes !== undefined && cues.shapes !== null)
            shapes.push(...cues.shapes);
        shapes.forEach(shape => {
            if (shape.auto) {
                autoShapes.push({
                    orig: shape.orig,
                    dest: shape.dest,
                    brush: shape.brush
                });
            }
            else {
                nonAutoShapes.push({
                    orig: shape.orig,
                    dest: shape.dest,
                    brush: shape.brush
                });
            }
        });
        var highlights = [];
        if (cues.highlights !== undefined && cues.highlights !== null)
            highlights.push(...cues.highlights);
        highlights.forEach(highlight => {
            nonAutoShapes.push({
                orig: highlight.square,
                brush: highlight.brush
            });
        });
        cg.setAutoShapes(autoShapes);
        cg.setShapes(nonAutoShapes);
    }
    updateMousePosition(e) {
        var event = e;
        this.mouseX = event.clientX;
        this.mouseY = event.clientY;
    }
    shouldComponentUpdate(nextProps, nextState) {
        var shouldUpdate = nextProps.fen !== this.props.fen ||
            nextState.chessWidth !== this.state.chessWidth ||
            nextState.chessHeight !== this.state.chessHeight ||
            nextProps.perspective !== this.props.perspective ||
            nextProps.cues !== this.props.cues;
        if (shouldUpdate) {
            this.chess.load(nextProps.fen);
        }
        return shouldUpdate;
    }
    ;
    calcMovable() {
        if (this.props.readOnly) {
            const dests = {};
            return {
                free: false,
                dests,
                color: this.props.allowMoveOtherColor ? this.turnColor() : this.props.perspective
            };
        }
        const dests = {};
        this.chess.SQUARES.forEach(s => {
            const ms = this.chess.moves({ square: s, verbose: true });
            if (ms.length)
                dests[s] = ms.map(m => m.to);
        });
        return {
            free: false,
            dests,
            color: this.props.allowMoveOtherColor ? this.turnColor() : this.props.perspective
        };
    }
    turnColor() {
        return this.chess.turn() === "w" ? "white" : "black";
    }
}
var ChessBoard$1 = withSize({
    monitorHeight: true,
    monitorWidth: true,
    noPlaceholder: false
})(ChessBoard);

class PositionClassifier extends React.Component {
    constructor(props) {
        super(props);
        this.render = () => {
            const motifBoxes = this.props.task.categories.map(c => {
                return (React.createElement(React.Fragment, null,
                    React.createElement("input", { key: `${c.name}Cb`, name: `${c.name}Cb`, type: 'checkbox', onChange: (e) => {
                            const catState = this.state.categories;
                            catState[c.name] = e.currentTarget.checked;
                            this.setState({ categories: catState });
                        }, value: c.label }),
                    React.createElement("label", { htmlFor: `${c.name}Cb`, title: c.description }, c.label),
                    React.createElement("br", null)));
            });
            return (React.createElement("div", { style: { height: '100%', width: '100%', display: 'flex', flexDirection: 'row' } },
                React.createElement("div", { style: { flexGrow: 2 } },
                    React.createElement(ChessBoard$1, { readOnly: true, fen: this.props.task.initialFen, perspective: this.props.task.perspective })),
                React.createElement("div", { style: { flexGrow: 1 } },
                    React.createElement("h3", null, "What motifs apply in this position?"),
                    React.createElement("br", null),
                    motifBoxes,
                    React.createElement("hr", null),
                    React.createElement("button", { style: { cursor: 'pointer' }, value: 'Submit', onClick: (_) => {
                            var selectedCategories = [];
                            this.props.task.categories.forEach(c => {
                                if (this.state.categories[c.name]) {
                                    selectedCategories.push(c);
                                }
                            });
                            this.props.onSubmit(selectedCategories);
                        } }, "Submit"))));
        };
        var categories = {};
        props.task.categories.forEach(c => {
            categories[c.name] = false;
        });
        this.state = {
            categories: categories
        };
    }
}

export { PositionClassifier };
